type RootQuery {
  users: [User!]!
  userById(id: ID!): User
  products(search: String): [Product!]!
  orders(ordersQuery: OrdersQuery): [Order!]!
  loginUser(credentials: Credentials): Token
}

type RootMutation {
  createUser(userData: CreateUserInput!): User!
  createOrder(orderData: CreateOrderData!): Order!
  createProduct(productData: CreateProductInput!): Product!
}

schema {
  query: RootQuery
  mutation: RootMutation
}

input CreateUserInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  address: AddressInput
}

input CreateProductInput {
  name: String!
  estimatedPrice: Int!
  description: String
}

input AddressInput {
  city: String!
  zip: Int!
  streetAddress: String!
}

input Credentials {
  email: String!
  password: String!
}

input OrdersQuery {
  state: OrderState
  orderBy: OrdersOrderByInput
}

enum OrdersOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

type User {
  _id: ID!
  email: String!
  firstName: String!
  lastName: String!
  password: String
  phoneNumber: String!
  addresses: [Address]
  orders: [Order!]!
  isCourier: Boolean!
  courierOrders: [Order!]!
}

type Address {
  city: String!
  zip: Int!
  streetAddress: String!
}

input CreateOrderData {
  preferredDeliveryTime: TimeIntervalInput
  items: [OrderItemInput!]!
  address: AddressInput!
  deadline: String!
}

input OrderItemInput {
  productId: ID!
  amount: Int!
  amountType: AmountType!
}

input TimeIntervalInput {
  start: String!
  end: String!
}

type Order {
  _id: ID!
  customer: User!
  state: OrderState!
  items: [OrderItem!]!
  address: Address!
  courier: User
  deadline: String!
  preferredDeliveryTime: TimeInterval
  totalPrice: Int!
  createdAt: String!
}

enum OrderState {
  CREATED
  POSTED
  ASSIGNED
  COMPLETED
  EXPIRED
}

type TimeInterval {
  start: String!
  end: String!
}

type OrderItem {
  amount: Int!
  amountType: AmountType!
  product: Product!
  price: Int!
}

enum AmountType {
  PIECE
  MASS
  LENGTH
  AREA
}

type Product {
  _id: ID!
  name: String!
  estimatedPrice: Int!
  description: String
}

type Token {
  userId: ID!
  token: String!
  expirationDate: String!
}