# import * from "./query/user.graphql"
# import * from "./query/order.graphql"
# import * from "./query/product.graphql"

schema {
  query: Query
  mutation: Mutation
}

type Query {
  users: [User!]!
  userById(id: ID!): User
  products(search: String): [Product!]!
  orders(ordersQuery: OrdersQuery): [Order!]!
  loginUser(credentials: Credentials): Token
  myAssignedOrders: [Order!]!
}

type Mutation {
  createUser(userData: CreateUserInput!): User!
  createOrder(orderData: CreateOrderData!): Order!
  createProduct(productData: CreateProductInput!): Product!
  completeOrder(orderId: ID!): CompleteOrderPayload!
  uploadMoney(amount: Int!): User!
  itemsPurchased(orderId: ID!, realPrice: Int!): Order!
  applyForOrder(orderId: ID!): Order
  applyForCourier: Boolean
}

type CompleteOrderPayload {
  order: Order
}

input CreateProductInput {
  name: String!
  estimatedPrice: Int!
  description: String
}

input AddressInput {
  city: String!
  zip: Int!
  streetAddress: String!
}

input Credentials {
  email: String!
  password: String!
}

input OrdersQuery {
  state: OrderState
  orderBy: OrdersOrderByInput
}

enum OrdersOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

type Address {
  city: String!
  zip: Int!
  streetAddress: String!
}

input CreateOrderData {
  preferredDeliveryTime: TimeIntervalInput
  items: [OrderItemInput!]!
  address: AddressInput!
  deadline: String!
  tipPrice: Int!
}

input OrderItemInput {
  productId: ID!
  amount: Int!
  amountType: AmountType!
}

input TimeIntervalInput {
  start: String!
  end: String!
}

type TimeInterval {
  start: String!
  end: String!
}

type OrderItem {
  amount: Int!
  amountType: AmountType!
  product: Product!
  price: Int!
}

enum AmountType {
  PIECE
  MASS
  LENGTH
  AREA
}

type Token {
  userId: ID!
  token: String!
  expirationDate: String!
}